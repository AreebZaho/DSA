int furthestBuilding(vector<int>& v, int b, int l) {
    //use pq to store samllest diffs while using ladders in all gaps and if l == 0 then replace smallest gaps 
    //with bricks and l = 1 (1 ladder recovered)
    priority_queue<int, vector<int>, greater<int>> pq;//min heap
    for (int i = 0; i < v.size() - 1; ++i) {
        int diff = v[i + 1] - v[i];
        if (diff < 1) continue;
        //pq.size <= ladders available
        if (l) {
            pq.push(diff);
            --l;
        } else if (!pq.empty()) {//means total l given > 0
            if (pq.top() <= b) {pq.push(diff); b -= pq.top(); pq.pop();}
            //added diff in pq (that jump done by ladder) | first addint so if less goest on top and done by bricks only
            else if (b >= diff) b -= diff;
            else return i;
        } else {//means total l given = 0
            if (b >= diff) b -= diff;
            else return i;
        }
    }
    return v.size() - 1;//reached last idx
}
