int n, m, mod = 1e9 + 7;
string s, t;
int dfs(int i, int j, vector<vector<int>>& dp) {
    if (dp[i][j] != -1) return dp[i][j];
    int res = 0;
    if (j == m - 1) return dp[i][j] = (s[i] == t[j]) ? 1 : 0;
    if (s[i] == t[j]) {
        for (int I = i + 1; I < n; ++I)
            res = (res + dfs(I, j + 1, dp)) % mod;
    } else return dp[i][j] = 0;
    return dp[i][j] = res;
}
int subsequenceCount(string s1, string s2) {//find subsqn in s1
    s = s1; t = s2; n = s.length(); m = t.length();
    vector<vector<int>> dp(n + 1, vector<int>(m + 1, -1));
    int res = 0;
    for (int i = 0; i < n; ++i) {
        dp[i][0] = dfs(i, 0, dp);
        res = (res + dp[i][0]) % mod;
    }
    return res;
}

//lc
int findJudge(int n, vector<vector<int>>& t) {
  //every node has judge as direct neighbor
  //judge has no neighbor nodes
  //there is only one judge
  //do incoming - outgoing
  vector<int> a(n+1, 0);//1 to n nodes
  for (auto& e : t) {
      a[e[0]]--;
      a[e[1]]++;
  }
  for (auto& i : a) cout << i << " ";
  int res = -1;
  for (int i = 1; i <= n; ++i) {
      if (a[i] == n - 1) {
          if (res != -1) return -1;
          res = i;
      }
  }
  return res;
}
